---
title: "Week 9: A Beginner's Introduction to R Shiny"
author: "Emorie D Beck"
format: 
  revealjs:
    incremental: true
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    preview-links: true
    page-layout: custom
    slide-number: true
    self-contained: true
    auto-play-media: true
    fig-height: 4
    fig-width: 6
    fig-align: center
    css: custom.css
    theme: psc290
    # highlight-style: tango
    margin-left: "0"
    margin-right: "0"
    width: 1400
    # height: 900
    footer: "PSC 290 - Data Visualization"
    logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
  # pptx:
  #   incremental: true
  #   # code-tools: true
  #   # code-copy: true
  #   # code-line-numbers: true
  #   # code-link: true
  #   css: custom.css
  #   theme: psc290
  #   highlight-style: atom-one-dark
  #   footer: "PSC 290 - Data Visualization"
  #   logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
# server: shiny
editor_options: 
  chunk_output_type: console
---

```{r, echo = F}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F, out.width = "90%", fig.align="center")
options(knitr.kable.NA = '')
```


## 


```{r, echo = F}
knitr::include_graphics("https://github.com/rstudio/hex-stickers/raw/main/PNG/shiny.png")
```



## Packages  


```{r, echo = T}
#| code-line-numbers: "17"
library(RColorBrewer)
library(knitr)
library(kableExtra)
library(plyr)
library(broom)
library(modelr)
library(lme4)
library(broom.mixed)
library(tidyverse)
library(ggdist)
library(patchwork)
library(cowplot)
library(DiagrammeR)
library(wordcloud)
library(tidytext)
library(ggExtra)
library(quarto)
library(shiny)
library(distributional)
library(gganimate)
```


<!-- ## Custom Theme:  -->

<!-- ```{r} -->
<!-- my_theme <- function(){ -->
<!--   theme_classic() +  -->
<!--   theme( -->
<!--     legend.position = "bottom" -->
<!--     , legend.title = element_text(face = "bold", size = rel(1)) -->
<!--     , legend.text = element_text(face = "italic", size = rel(1)) -->
<!--     , axis.text = element_text(face = "bold", size = rel(1.1), color = "black") -->
<!--     , axis.title = element_text(face = "bold", size = rel(1.2)) -->
<!--     , plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5) -->
<!--     , plot.subtitle = element_text(face = "italic", size = rel(1.2), hjust = .5) -->
<!--     , strip.text = element_text(face = "bold", size = rel(1.1), color = "white") -->
<!--     , strip.background = element_rect(fill = "black") -->
<!--     ) -->
<!-- } -->
<!-- ``` -->

## What is Shiny?  

* R package that allows you to create interactive GUIs in `R`
* Highly flexible and customization

### Applications  

* Intuitive tools for science
* Presenting results
* Collecting data
* Teaching

# Examples  

---


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/dist.gif")
```


---


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/diff.gif")
```


---


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/data.gif")
```


---


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/maps.gif")
```


---


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alcohol.gif")
```


## How Does Shiny Work  

::::{.columns}

:::{.column}

### ui

* Runs once
* Specifies the user interface
* Defined as an object
* Stable and unchanging

:::


:::{.column}

### server

* Runs continually
* Specifies the logic
* Defined as a function
* Can change in response to input


:::
::::

## Old Faithful  

* Open `RStudio`
* Double check `shiny` is installed (if not, `install.packages("shiny")`)
* File -> New File -> Shiny Web App...


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/old-faithful.png")
```


## Old Faithful  


```{r, echo = F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/oldfaithful.gif")
```


## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(
  
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic1.png")
```



:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data")
  
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic2.png")
```



:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    
  )
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic3.png")
```



:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      
    )
  )
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic4.png")
```


:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      sliderInput("bins",
                  "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30)
    )
  )
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic5.png")
```


:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      sliderInput("bins",
                  "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30),

  # Show a plot of the generated distribution
      mainPanel(
        
      )
    )
  )
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic6.png")
```


:::
::::

## Old Faithful - ui  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
library(shiny)

# Define UI for application that draws a histogram
ui <- fluidPage(

  # Application title
  titlePanel("Old Faithful Geyser Data"),
  
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
      sliderInput("bins",
                  "Number of bins:",
                  min = 1,
                  max = 50,
                  value = 30),

  # Show a plot of the generated distribution
      mainPanel(
        plotOutput("distPlot")
      )
    )
  )
)
```


:::
:::{.column}


```{r, echo = F, out.width="80%"}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/shinylogic7.png")
```


:::
::::

## ui  

## Old Faithful - server  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
# Define server logic required to draw a histogram
server <- function(input, output) {

}
```


:::
:::{.column}


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic1.png")
```


:::
::::

## Old Faithful - server  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
# Define server logic required to draw a histogram
server <- function(input, output) {

  output$distPlot <- renderPlot({
    
  })
}
```


:::
:::{.column}


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic2.png")
```


:::
::::

## Old Faithful - server  {.smaller}

::::{.columns}
:::{.column}


```{r, eval = F}
#| code-line-numbers: "|7"
# Define server logic required to draw a histogram
server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
        x    <- faithful[, 2]
        bins <- seq(min(x), max(x), length.out = input$bins + 1)

        # draw the histogram with the specified number of bins
        hist(x, breaks = bins, col = 'darkgray', border = 'white',
             xlab = 'Waiting time to next eruption (in mins)',
             main = 'Histogram of waiting times')
    })
}
```


:::
:::{.column}


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/serverlogic3.png")
```


:::
::::

## Old Faithful  


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alllogic1.png")
```


## Old Faithful  


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/alllogic2.png")
```


## server  

## Deploying Shiny Apps  

### Running Locally
* The easiest way to share a Shiny app is by sharing the code (e.g. on GitHub). 
* These can then be downloaded and run locally.

### Running Online
* If you want to make your Shiny app available as a web app online you will need a Shiny server:
  + You can deploy to https://www.shinyapps.io/ for free
  + If you have a web server, you can host your own Shiny server
  
# Exercise  

## Exercise  

* I started writing my own exercise, then stumbled across one [Lisa DeBruine](https://www.gla.ac.uk/schools/psychologyneuroscience/staff/lisadebruine/) made, which is an excellent starting point. 
* Go to [https://psyteachr.github.io/shiny-tutorials/01-first-app.html](https://psyteachr.github.io/shiny-tutorials/01-first-app.html)
* Walk through the steps, and we'll come back together in ~20-30 minutes  

# Digging Deeper  

## The `.app` file  

* In the .app file, everything outside of the `ui()` and `server()` calls is fair game. 
* I use this space to: 
  + load packages
  + load data 
  + create data frames that help me rename inputs and outputs  

## The `.app` file: Load packages  {.smaller}


```{r, eval = F}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(patchwork)
library(plyr)
library(tidyverse)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)
```


## The `.app` file: Load data  {.smaller}  


```{r, eval = F}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(patchwork)
library(readxl)
library(plyr)
library(tidyverse)

load("data.RData")
d1 <- read_csv("data.csv")
d2 <- read_excel("data.xlsx", sheet = "sheet1")

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)
```


## The `.app` file: Load data  {.smaller}  


```{r, echo=F}
knitr::include_graphics("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/09-week9-shiny/01-images/loadData.png")
```


## The `.app` file: Rename inputs and outputs  {.smaller}


```{r, eval = F}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(patchwork)
library(plyr)
library(tidyverse)

traits <- tribble(
  ~old,              ~new, 
  "Extraversion"     , "E",
  "Agreeablenss"     , "A",
  "Conscientiousness", "C",
  "Neuroticism"      , "N",
  "Openness"         , "O"
)

# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Old Faithful Geyser Data"),

    # Sidebar with a slider input for number of bins 
    sidebarLayout(
        sidebarPanel(
            sliderInput("bins",
                        "Number of bins:",
                        min = 1,
                        max = 50,
                        value = 30)
        ),

        # Show a plot of the generated distribution
        mainPanel(
           plotOutput("distPlot")
        )
    )
)
```


## Reactive Input  

* Often, my inputs are things like participant ID's that can number in the hundreds to thousands and differ across dimensions of the study  
* In these cases, we need to create reactive inputs, using `observe()` calls within the `server()` function of the app   

## Storing your data  

* One of the most important considerations with your app is trying to make sure that it runs as speedily as possible  
* If you have tons of images, tables, etc., pre-loading all of them can make your app crash or take a long time to load
* `ggplot2` figures with lots of data points can take a fair amount of time to plot (remember `ggdist`?)

## Storing your data  

* So what are your options: 
  + Only load raw data and create plots directly within the app, one at a time, according to inputs  
  + Load already created ggplot objects and use `plot()` to call them individually (directly with the app or via GitHub)
  + Pre-save images as .png and display them via `html` (via GitHub; this is my preferred because it gives me the most control over sizing)  
  
## Storing your data: raw data within the app  


```{r, eval = F}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(plyr)
library(tidyverse)
library(patchwork)

load("ipcs_data.RData")
```



## Storing your data: raw data from GitHub  


```{r, eval = F}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(plyr)
library(tidyverse)
library(patchwork)

load(url("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/05-week5-time-series/01-data/ipcs_data.RData"))
```



<!-- ## Storing your data: `ggplot2` objects within the app   -->

<!-- ## Storing your data: `ggplot2` objects from GitHub   -->

## Storing your data: presaved images  {.smaller}


```{r, eval = F}
# Define UI for application that draws a histogram
ui <- fluidPage(

    # Application title
    titlePanel("Persons, Situations, and Time: Idiographic Behavior Prediction"),
    
  tabsetPanel(
    
  ############# Sequence Plots of Feature Categories #############################
    tabPanel(
      "Feature Proportions"
      , sidebarLayout(
          sidebarPanel(
            selectInput(
                  "outcome1"
                  , label = "Choose Outcome"
                  , selected = "Procrastinating"
                  , choices = c(
                    "Procrastinating", "Lonely", "Tired", "Sick",
                    "Studying", "Argument", "Interacted"
                    )
                  )
                )
              , mainPanel(
                htmlOutput("seq_plot_text")
                , shinybrowser::detect()
                , htmlOutput("seq_plot")
                )
              )
          )
  ))
```

