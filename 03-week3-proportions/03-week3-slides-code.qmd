---
title: "Week 2: Cognitive Perspectives and Introduction to ggplot2"
author: "Emorie D Beck"
format: 
  revealjs:
    incremental: true
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    preview-links: true
    slide-number: true
    self-contained: true
    css: custom.css
    theme: psc290
    highlight-style: atom-one-dark
    margin-left: "0"
    margin-right: "0"
    width: 1400
    # height: 900
    footer: "PSC 290 - Data Visualization"
    logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
  # pptx: 
  #   incremental: true  
  #   # code-tools: true
  #   # code-copy: true
  #   # code-line-numbers: true
  #   # code-link: true
  #   css: custom.css
  #   theme: psc290
  #   highlight-style: atom-one-dark
  #   footer: "PSC 290 - Data Visualization"
  #   logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
editor_options: 
  chunk_output_type: console
---


```{r}
library(plyr)
library(tidyverse)
```

# Quick Review  
## Review  
### What are the core elements of ggplot2 grammar?

From last week:

* **Mappings**: base layer 
  + `ggplot()` and `aes()`
* **Scales**: control and modify your mappings 
  + e.g., `scale_x_continuous()` and `scale_fill_manual()`
* **Geoms**: plot elements 
  + e.g., `geom_point()` and `geom_line()`
* **Facets**: panel your plot 
  + `facet_wrap()` and `facet_grid()`
* **Themes**: style your figure 
  + Built-in: e.g., `theme_classic()`
  + Manual: `theme()` (`legend`, `strip`, `axis`, `plot`, `panel`)

# Part 1: Proportions  
## Visualizating Proportions
* Proportions are often important in our research
* From describing sample-level differences to describing the frequency of behaviors / events / experiences, etc., we often reach toward describing amounts relative to the whole
* But the goals we are trying to achieve are varied, which necesssitates the use of different graphics

## Part 1: Agenda
* We will cover X kinds of ways of visualizations, all of which were covered in your readings
* We will cover both when to use them and how to create them
  + Pie Charts 
  + Bar Charts (Stacked)
  + Bar Charts (Side-by-Side)
  + Bar Charts and Density Across Continuous Variables
  + Mosaic Plots
  + Parallel Sets

## But First, Our Data  
* Today, we'll use the teaching sample from the German Socioeconomic Panel Study (GSOEP)
* GSOEP is an ongoing longitudinal panel study that began in 1984 (26 waves of data!)
* ~20,000 people are sampled each year
* Samples households in Germany
* Has additional sub-projects (e.g., innovation studies, migrant panel, etc.)
* The data are publicly available via application

```{r gsoep clean fun, eval = F}
gsoep_read_fun <- function(Year, WL){
  print(Year)
  old.names <- (gsoep_codebook %>% filter(year == Year))$orig_itemname 
  p <- sprintf("%s/gsoep/%sp.sav", data_path, WL) %>% haven::read_sav(.) %>%
    full_join(sprintf("%s/gsoep/%spequiv.sav", data_path, WL) %>% haven::read_sav(.)) %>%
    full_join(ref) %>%
    filter(rgroup20 > 10) %>%
    select(SID = persnr, HID = hhnr, one_of(old.names)) %>%
    pivot_longer(
      cols = c(-SID, -HID)
      , values_to = "value"
      , names_to = "orig_itemname"
      , values_drop_na = T
    )
}

gsoep_codebook <- read_csv("https://raw.githubusercontent.com/emoriebeck/psc290-data-viz-2022/main/03-week3-proportions/01-codebook.csv") %>%
  mutate(orig_itemname = str_to_lower(orig_itemname))
gsoep_codebook

data_path <- "/Volumes/Emorie/data"
ref <- sprintf("%s/gsoep/cirdef.sav", data_path) %>% haven::read_sav(.) %>% select(cid, rgroup20)
gsoep_st <- sprintf("%s/gsoep/ppath.sav", data_path) %>% haven::read_sav(.) %>% 
  full_join(ref) %>% 
  filter(rgroup20 > 10) %>%
  left_join(
    sprintf("%s/gsoep/biojob.sav", data_path) %>% haven::read_sav(.) %>%
      select(pid = persnr, job = nacelj)) %>%
  select(SID = pid, gender = sex, yearBrth = gebjahr, mortality = todjahr, job) %>%
  distinct() 

gsoep <- gsoep_codebook %>% 
  select(wave, waveletter, year) %>%
  filter(complete.cases(.)) %>%
  distinct() %>%
  arrange(year) %>%
  mutate(data = map2(year, waveletter, gsoep_read_fun)) 

gsoep_long <- gsoep %>%
  unnest(data)

Mode <- function(x) {
  ux <- unique(x)
  ux <- ux[!is.na(ux)]
  ux[which.max(tabulate(match(x, ux)))]
}

gsoep_recode <- gsoep_long %>%
  left_join(gsoep_codebook %>%
    select(name, itemname, wave, year, orig_itemname, reverse_code:comp_rule)) %>%
  group_by(name) %>% 
  nest() %>%
  ungroup()

# recode 
recode_fun <- function(rule, y, year){
  x <- y$value
  if(!is.na(rule)){y$value <- eval(parse(text = rule))}
  return(y)
}

fun_call <- function(x, rule){
    switch(rule,
           average = mean(x, na.rm = T),
           mode = Mode(x)[1],
           sum = sum(x, na.rm = T),
           skip = unique(x)[1],
           max = max(x, na.rm = T),
           min = min(x, na.rm = T))
  }

gsoep_recode <- gsoep_recode %>% 
  mutate(data = map(data, ~(.) %>% 
    group_by(recode, year) %>%
    nest() %>%
    ungroup() %>%
    mutate(data = pmap(list(recode, data, year), recode_fun)) %>%
    unnest(data) %>%
    mutate(value = ifelse(value < 0 | is.nan(value) | is.infinite(value), NA, value))))

gsoep <- gsoep_recode %>%
  unnest(data) %>%
  select(name, year, SID, value) %>%
  pivot_wider(
    names_from = "name"
    , values_from = "value"
  ) %>%
  left_join(gsoep_st) %>%
  mutate(
    age = year - yearBrth
    , mortality = ifelse(mortality < 0, 0, ifelse(mortality <= year, 1, 0))
    , job = ifelse(job < 0, NA, job)
  )
save(gsoep, file = "/Volumes/Emorie/GitHub/psc290-data-viz-2022/03-week3-proportions/04-data/gsoep.RData")
```

```{r}
load(url("https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/03-week3-proportions/04-data/gsoep.RData"))
gsoep
```

## Pie Charts  
* You may be wondering if you should ever use a pie chart
* The answer is, of course, it depends
* Pie charts are great when: 
  + What you want to visualize is simple (e.g., basic fractions)
  + You want to clearly emphasize proportion relative to the whole
  + You have a small data set
  
## Pie Charts  
* In our data, we have a few variables that follow this, but we'll focus on two:
  + marital status (4 groups)
  + gender (2 groups)
* `ggplot2` doesn't specifically support pie charts
* Why? Because it's a layered grammar of graphics and an explicit function for it would be redundant with some of the built in coordinates
  + specifically, `coord_polar()`
* So to make a pie chart, we'll use `geom_bar() + coord_polar()`

```{r}
gsoep %>%
  filter(year == 2009 & !is.na(marital)) %>% # random
  group_by(marital) %>%
  tally() %>%
  mutate(marital = factor(marital, 1:4, c("Married", "Separated", "Widowed", "Never Married"))) %>%
  ggplot(aes(x = "", y = n, fill = marital)) + 
    geom_bar(stat = "identity", width = 1, color = "white") + 
    coord_polar("y", start = 0) + 
    theme_void()
```

## Pie Charts  
### Improvements

```{r}
gsoep %>%
  filter(year == 2009 & !is.na(marital)) %>% # random
  group_by(marital) %>%
  tally() %>%
  mutate(marital = factor(marital, 1:4, c("Married", "Separated", "Widowed", "Never Married"))) %>%
  arrange(desc(marital)) %>%
  mutate(prop = n / sum(n) * 100
         , ypos = cumsum(prop)- 0.5*prop) %>%
  ggplot(aes(x = "", y = prop, fill = marital)) + 
    geom_bar(stat = "identity", width = 1, color = "white") + 
    geom_text(aes(y = ypos, label = marital), color = "white", size=4) +
    scale_fill_brewer(palette="Set1") + 
    coord_polar("y", start = 0) + 
    theme_void() + 
    theme(legend.position = "none")
```



# Part 2: Probability  
