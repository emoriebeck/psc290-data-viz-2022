---
title: "Week 6: Visualizing Uncertainty"
author: "Emorie D Beck"
format: 
  revealjs:
    incremental: true
    code-tools: true
    code-copy: true
    code-line-numbers: true
    code-link: true
    preview-links: true
    slide-number: true
    self-contained: true
    fig-height: 4
    fig-width: 6
    fig-align: center
    css: custom.css
    theme: psc290
    # highlight-style: tango
    margin-left: "0"
    margin-right: "0"
    width: 1400
    # height: 900
    footer: "PSC 290 - Data Visualization"
    logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
  # pptx: 
  #   incremental: true  
  #   # code-tools: true
  #   # code-copy: true
  #   # code-line-numbers: true
  #   # code-link: true
  #   css: custom.css
  #   theme: psc290
  #   highlight-style: atom-one-dark
  #   footer: "PSC 290 - Data Visualization"
  #   logo: "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
editor_options: 
  chunk_output_type: console
---

```{r, echo = F}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F, error = F, out.width = "90%", fig.align="center")
options(knitr.kable.NA = '')
```

# Piecing Plots Together  

## Packages  

```{r, echo = T}
# | code-line-numbers: "11-12"
library(RColorBrewer)
library(knitr)
library(kableExtra)
library(plyr)
library(broom)
library(modelr)
library(lme4)
library(broom.mixed)
library(tidyverse)
library(ggdist)
library(cowplot)
library(ggExtra)
library(distributional)
library(gganimate)
```

## Custom Theme: 
```{r}
my_theme <- function(){
  theme_classic() + 
  theme(
    legend.position = "bottom"
    , legend.title = element_text(face = "bold", size = rel(1))
    , legend.text = element_text(face = "italic", size = rel(1))
    , axis.text = element_text(face = "bold", size = rel(1.1), color = "black")
    , axis.title = element_text(face = "bold", size = rel(1.2))
    , plot.title = element_text(face = "bold", size = rel(1.2), hjust = .5)
    , plot.subtitle = element_text(face = "italic", size = rel(1.2), hjust = .5)
    , strip.text = element_text(face = "bold", size = rel(1.1), color = "white")
    , strip.background = element_rect(fill = "black")
    )
}
```


## Review  {.smaller}

<!-- 1 column start -->

* Over the last several weeks, we have talked about: 
  + tidying data 
  + `ggplot2` logic
  + visualizing proportions
  + visualizing differences
  + visualizing time series
  + visualizing uncertainty
  
<!-- 2 column start -->

* For the rest of the course, we will pivot to taking everything we've learning and piecing it all together
  + **Today**: Piecing visualizations together
  + **Next week**: Polishing visualizations \*\* 
  + **11/21:** Interactive Visualizations (`shiny`)
  
<!-- column end -->

## Today  

* There are lots of packages for piecing visualizations together
* I have used lots and the only one that I can say I've actually liked in `cowplot`, so I'm going to teach you that
* There are other more specialized packages worth mentioning  

## Today  

* Here is a short list of some core `ggplot2` extensions: [https://exts.ggplot2.tidyverse.org/gallery/](https://exts.ggplot2.tidyverse.org/gallery/)
* We'll cover: 
  + `ggextra`
  + `cowplot` (and lots of assortments)

## `ggextra`

* We'll start with `ggextra` because it will help us create plots with distributions in the margins. 
* After, we'll move to cowplot, where there will be lots of little odds and ends to step through

## `cowplot`

* Why `cowplot`? 
  + figure alignment
  + easier to choose relative values and layouts
  + can mix base `R` plots and `ggplot2` plots
  + allows you to annotate plots (including stacking, as opposed to layering)
  + shared legends!
  + includes the themes from his book  

## `cowplot` {.smaller}

Let me show you a couple of examples from my work that has used cowplot  

## 

```{r, echo = F, out.width="100%"}
include_graphics("https://github.com/emoriebeck/selection/raw/master/results/sca/plots/png/perm_mortality_N.png")
```

## 

```{r, echo = F, out.width="60%"}
include_graphics("https://github.com/emoriebeck/personality-dementia-neuropath/raw/master/results/figures/study-specific-combined-panels/dementia-shared.png")
```


## 

```{r, echo = F}
include_graphics("https://github.com/emoriebeck/behavior-prediction/raw/main/05-results/05-figures/fig-4-combined_top5.png")
```

## `plot_grid()` {.smaller}

* The core function of `cowplot` is `plot_grid()`, which allows us to place differnt figures within the same figure in a grid, and it has a lot of useful arguments

::::{.columns}
:::{.column width="34%"}

* `plotlist = NULL`
* `align = c("none", "h", "v", "hv")`
* `axis = c("none", "l", "r", "t", "b", "lr", "tb", "tblr")`
* `nrow = NULL`
* `ncol = NULL`
* `rel_widths = 1`
* `rel_heights = 1`

:::
:::{.column width="33%"}

* `labels = NULL`
* `label_size = 14`
* `label_fontfamily = NULL`
* `label_fontface = "bold"`
* `label_colour = NULL`
* `label_x = 0`
* `label_y = 1`

:::
:::{.column width="33%"}

* `hjust = -0.5`
* `vjust = 1.5`
* `scale = 1`
* `greedy = TRUE`
* `byrow = TRUE`
* `cols = NULL`
* `rows = NULL`

:::
::::

## `plot_grid()` {.smaller}

* Let's build up our use cases incrementally! 
* But first, we need some plots to plot!  
* Remember these data?  

```{r}
load(url("https://github.com/emoriebeck/psc290-data-viz-2022/blob/main/04-week4-associations/04-data/week4-data.RData?raw=true"))
pred_data
```

## Example Setup

And remember these models?  

```{r}
tidy_ci <- function(m) tidy(m, conf.int = T)

nested_m <- pred_data %>%
  group_by(study) %>%
  nest() %>%
  ungroup() %>%
  mutate(
    m = map(data
            , ~glm(
              o_value ~ p_value
              , data = .
              , family = binomial(link = "logit")
              )
            )
    , tidy = map(m, tidy_ci)
  )
nested_m
```

## Example Setup

And remember these models?  
Let's do one small change

```{r}
m_fun <- function(d) {
  glm(o_value ~ p_value + married + married:p_value
      , data = d
      , family = binomial(link = "logit"))
}
tidy_ci <- function(m) tidy(m, conf.int = T) %>% mutate(df.resid = m$df.residual, n = nrow(m$data))

nested_m <- pred_data %>%
  group_by(study) %>%
  nest() %>%
  ungroup() %>%
  mutate(
    m = map(data, m_fun)
    , tidy = map(m, tidy_ci)
  )
nested_m
```

## Example Setup  

Here's our unnested model terms

```{r}
nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp)
```

## Example Setup  

But maybe we are particularly interested in the interaction between marital status and personality in predicting mortality, which we want to plot as a forest plot  

```{r}
nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%
  filter(term == "p_value:married1")
```

## Example Setup  

* We could hack our way to a forest plot in a single figure, but it never looks as nice as if we do it in two  
  + the forest plot itself  
  + the table of values  

## Example Setup: Forest Plot  

```{r}
p1 <- nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%
  filter(term == "p_value:married1") %>%
  ggplot(aes(x = estimate, y = fct_rev(study))) + 
    labs(
      x = "Model Estimated OR (CI)"
      , y = NULL
      ) + 
    my_theme()
p1
```

## Example Setup: Forest Plot  

Let's add our point estimates and uncertainty intervals

```{r}
p1 + 
  stat_gradientinterval(
    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))
    , .width = c(.95, .99)
    , shape = "square"
  ) 
p1
```

## Example Setup: Forest Plot  

```{r}
p1 <- nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%
  filter(term == "p_value:married1")

p1 <- p1 %>% 
  mutate(study = factor(study, (p1 %>% arrange(desc(estimate)))$study)) %>%
  ggplot(aes(x = estimate, y = study)) + 
    labs(
      x = "Model Estimated OR (CI)"
      , y = NULL
      ) + 
    my_theme()
p1
```

## Example Setup: Forest Plot  

Let's add our point estimates and uncertainty intervals

```{r}
p1 <- p1 + 
  stat_gradientinterval(
    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))
    , .width = c(.95, .99)
    , shape = "square"
  ) 
p1
```

## Example Setup: Forest Plot  

```{r}
p1 <- p1 + 
  geom_vline(aes(xintercept = 1), linetype = "dashed") 
p1 
```

## Example Setup: Forest Plot Table 
* In a forest plot, we don't just show estimates, we print them with the sample size  

```{r}
p2 <- nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%
  filter(term == "p_value:married1")

stdy_levs <-  tibble(num = 1:6, new = (p2 %>% arrange(desc(estimate)))$study)

p2 <- p2 %>%
  arrange(desc(estimate)) %>%
  mutate(study = factor(study, stdy_levs$new)
         , study2 = 1:n()) %>%
  mutate_at(vars(estimate, conf.low, conf.high), ~sprintf("%.2f", .)) %>%
  mutate(est = sprintf("%s [%s, %s]", estimate, conf.low, conf.high)
         , n = as.character(n)) %>%
  select(study, study2, estimate, n, est) %>%
  pivot_longer(
    cols = c(est, n)
    , values_to = "lab"
    , names_to = "est"
  )
p2
```

## Example Setup: Forest Plot Table 

```{r}
p2 <- p2 %>%
  ggplot(aes(x = est, y = study2)) + 
    labs(
      x = NULL
      , y = NULL
      ) + 
    my_theme()
p2
```

## Example Setup: Forest Plot Table 

```{r}
p2 <- p2 + 
  geom_text(aes(label = lab))
p2
```

## Example Setup: Forest Plot Table 

```{r}
p2 <- p2 + 
  theme_void()
p2
```

## Example Setup: Forest Plot Table 

```{r}
p2 <- p2 + 
  geom_hline(aes(yintercept = 6.5)) + 
  theme(axis.line.x = element_line(color = "black"))
p2
```

## Example Setup: Forest Plot Table 

```{r}
# "My~bold(Partly~Bold)~and~italic(Partly~Italic)~Text"
p2 <- p2 + 
  annotate("text"
           , x = "est" , y = 7
           , label = "b [CI]"
           , fontface = "bold"
           ) + 
  annotate("text"
           , x = "n", y = 7
           , label = "N"
           , fontface = "bold"
           ) 
p2
```

## Example Setup: Forest Plot Table 

```{r}
p2 <- p2 + 
  scale_y_continuous(limits = c(.4,7.1))
p2
```

## Example Setup: Back to the Forest Plot  

We added an extra row at the top of the table, so we need to do that for the forest plot, too

```{r}
p1 <- nested_m %>% select(study, tidy) %>%
  unnest(tidy) %>%
  mutate_at(vars(estimate, conf.low, conf.high), exp) %>%
  filter(term == "p_value:married1")

stdy_levs <-  tibble(num = 1:6, new = (p1 %>% arrange(desc(estimate)))$study)

p1 <- p1 %>%
  arrange(desc(estimate)) %>%
  mutate(study = factor(study, stdy_levs$new)
         , study2 = 1:n()) %>%
  ggplot(aes(x = estimate, y = study2)) + 
    labs(
      x = "Model Estimated OR (CI)"
      , y = NULL
      ) + 
    my_theme()
p1
```

## Example Setup: Forest Plot  

Add our point estimates and uncertainty intervals, along with the vertical line at OR = 1

```{r}
p1 <- p1 + 
  stat_gradientinterval(
    aes(xdist = dist_student_t(df = df.resid, mu = estimate, sigma = std.error))
    , .width = c(.95, .99)
    , shape = "square"
  ) + 
  geom_vline(aes(xintercept = 1), linetype = "dashed") 
p1
```

## Example Setup: Forest Plot  

Change the y scale back  

```{r}
p1 <- p1 + 
  scale_y_continuous(limits = c(.4,7.1)
                     , breaks = seq(1,6,1)
                     , labels = stdy_levs$new)
p1 
```

## Example Setup: Forest Plot  

Add in that top bar

```{r}
p1 <- p1 + 
  geom_hline(aes(yintercept = 6.5))
p1 
```

## Example Setup: Forest Plot  

Remove the y axis line

```{r}
p1 <- p1 + 
  theme(axis.line.y = element_blank(), 
        axis.ticks.y = element_blank())
p1 
```

## Example Setup: Forest Plot  

And let's block out where the dashed line touches the top:  

```{r}
p1 <- p1 + 
  annotate("rect"
           , xmin = -Inf
           , xmax = Inf
           , ymin = 6.51
           , ymax = Inf
           , fill = "white")
p1
```


## `plot_grid()`

* I know that was a lot, but such is the reality of ggplot -- we have to hack it!
  + `annotate()` is a great tool for this
  + so are our `scale_[map]_[type]` functions, especially given the labels can be anything we want!
  + and our `theme` elements also let us hack many more parts! 
* The biggest trick to `ggplot2` is simply having lots of tricks up your sleeve, which come from knowledge (and StackOverflow)

## `plot_grid()` {.smaller}

* But now that we have our plot, we want to put it together! Remember these? 

::::{.fragment}

::::{.columns}
:::{.column width="34%"}

:::{.nonincremental}  

* `plotlist = NULL`
* `align = c("none", "h", "v", "hv")`
* `axis = c("none", "l", "r", "t", "b", "lr", "tb", "tblr")`
* `nrow = NULL`
* `ncol = NULL`
* `rel_widths = 1`
* `rel_heights = 1`

:::
:::
:::{.column width="33%"}
:::{.nonincremental}  

* `labels = NULL`
* `label_size = 14`
* `label_fontfamily = NULL`
* `label_fontface = "bold"`
* `label_colour = NULL`
* `label_x = 0`
* `label_y = 1`

:::
:::
:::{.column width="33%"}
:::{.nonincremental}  

* `hjust = -0.5`
* `vjust = 1.5`
* `scale = 1`
* `greedy = TRUE`
* `byrow = TRUE`
* `cols = NULL`
* `rows = NULL`

:::
:::
::::
::::

## `plot_grid()` {.smaller}

:::{.nonincremental}  

* But now that we have our plot, we want to put it together! Remember these? 

:::

::::{.columns}
:::{.column width="34%"}

:::{.nonincremental}  

* `plotlist = NULL`
* `align = c("none", "h", "v", "hv")`
* `axis = c("none", "l", "r", "t", "b", "lr", "tb", "tblr")`
* `nrow = NULL`
* `ncol = NULL`
* `rel_widths = 1`
* `rel_heights = 1`

:::
:::
:::{.column width="33%"}
:::{.nonincremental}  

* ~~`labels = NULL`~~
* ~~`label_size = 14`~~
* ~~`label_fontfamily = NULL`~~
* ~~`label_fontface = "bold"`~~
* ~~`label_colour = NULL`~~
* ~~`label_x = 0`~~
* ~~`label_y = 1`~~

:::
:::
:::{.column width="33%"}
:::{.nonincremental}  

* ~~`hjust = -0.5`~~
* ~~`vjust = 1.5`~~
* ~~`scale = 1`~~
* ~~`greedy = TRUE`~~
* ~~`byrow = TRUE`~~
* ~~`cols = NULL`~~
* ~~`rows = NULL`~~

:::
:::
::::

## `plot_grid()` {.smaller}

```{r}
plot_grid(
  p1, p2
)
```

### Not bad, but we want to align our plots  

## `plot_grid()` {.smaller}

::::{.columns}
:::{.column width="34%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, align = "h")
```

::::
:::
:::{.column width="33%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, align = "v")
```

::::
:::
:::{.column width="33%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, align = "hv")
```

::::
:::
::::

### Similar behavior, but `"hv"` leads to odd spacing

## `plot_grid()` {.smaller}

::::{.columns}
:::{.column width="34%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, axis = "t")
```

::::
:::
:::{.column width="33%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, axis = "b")
```

::::
:::
:::{.column width="34%"}
::::{.fragment}

```{r}
plot_grid(p1, p2, axis = "tblr")
```

::::
:::
::::

### Doesn't properly align our bottom because it's not optimized for labels  

## `plot_grid()` {.smaller}

```{r}
plot_grid(
  p1, p2
  , align = "h"
  , nrow = 1
  , rel_widths = c(.6, .4)
  )
```

### Let our interval estimates **shine**  

## `plot_grid()` {.smaller}

```{r}
plot_grid(
  p1, p2
  , align = "hv"
  , nrow = 2
  , rel_heights = c(.6, .4)
  )
```

### We wouldn't do this, but note that when we have rows, we use `rel_heights`

## `plot_grid()`: Labels  

::::{.columns}
:::{.column}

```{r}
plot_grid(p1, p2, align = "h", nrow = 1
          , rel_widths = c(.6, .4)
          , labels = "auto")
```

:::
:::{.column}

```{r}
plot_grid(
  p1, p2, align = "h", nrow = 1
  , rel_widths = c(.6, .4)
  , labels = "AUTO")
```

:::
::::

## `plot_grid()`: Labels  

```{r}
plot_grid(
  p1, p2, align = "h", nrow = 1
  , rel_widths = c(.6, .4)
  , labels = "AUTO"
  , label_size = 18 # 14 default
  , label_fontface = "bold.italic"
  , label_fontfamily = "Times"
  , label_colour = "purple" # u is sensitive
  )
```

## `plot_grid()`: Labels  

```{r}
plot_grid(
  p1, p2, align = "h", nrow = 1
  , rel_widths = c(.6, .4)
  , labels = "AUTO"
  , label_size = 18 # 14 default
  , label_fontface = "bold.italic"
  , label_fontfamily = "Times"
  , label_colour = "purple" # u is sensitive
  , label_x = .5
  , label_y = .5
  )
```

## `plot_grid()`: Labels  

```{r}
plot_grid(
  p1, p2, align = "h", nrow = 1
  , rel_widths = c(.6, .4)
  , labels = "AUTO"
  , label_size = 18 # 14 default
  , label_fontface = "bold.italic"
  , label_fontfamily = "Times"
  , label_colour = "purple" # u is sensitive
  , label_x = c(.1,.85)
  , label_y = c(.95,.1)
  )
```

## `plot_grid()`: Labels  

```{r}
plot_grid(
  p1, p2, align = "h", nrow = 1
  , rel_widths = c(.6, .4)
  , labels = "AUTO"
  , label_size = 18 # 14 default
  , label_fontface = "bold.italic"
  , label_fontfamily = "Times"
  , label_colour = "purple" # u is sensitive
  , hjust = .5
  , vjust = .5
  )
```

## `plot_grid()`: titles  

It'd be nice if the title was centered, right?  

```{r}
plot_grid(
  p1 +
  labs(
    subtitle = "Conscientiousness x Marital Status"
    , title = "Mortality Odds"
    )
  , p2
  , align = "h"
  , nrow = 1
  , rel_widths = c(.6, .4)
)
```

## `plot_grid()`: titles  

It'd be nice if the title was centered, right?  

```{r}
p3 <- plot_grid(
  p1 
  , p2
  , align = "h"
  , nrow = 1
  , rel_widths = c(.6, .4)
)
p3
```

## New grobs for drawing on our plots

* To add the title, we need some new functions
*`cowplot` also adds some other new tools to our repertoire: 
  + `ggdraw()`
  + `draw_label()`
  + `draw_plot_label()`
  + `draw_grob()`
  + `draw_image()`

## New grobs: `ggdraw()` + `draw_label()`
`* `ggdraw()` is more or a setup function that allows us to add grobs on top
* We'll use it with `draw_label()` to make our title (just some text to put on the plot

## `plot_grid()`: titles  

```{r}
title <- ggdraw() + 
  draw_label(
    "Mortality Odds"
    , fontface = 'bold'
    , x = .5
    , hjust = .5
    , y = .8
  ) +
  draw_label(
    "Conscientiousness x Marital Status"
    , fontface = 'italic'
    , x = .5
    , hjust = .5
    , y = .2
  ) +
  theme(
    # add margin on the left of the drawing canvas,
    # so title is aligned with left edge of first plot
    plot.margin = margin(0, 0, 0, 7)
  )
title
```

## `plot_grid()`: titles  

```{r}
p <- plot_grid(
  title
  , p3
  , nrow = 2
  , rel_heights = c(.1, .9)
)
p
```

## New grobs for drawing on our plots

*`cowplot` also adds some other new tools to our repertoire: 
  + `ggdraw()`
  + `draw_label()`
  

## New grobs: `draw_label()`

* `draw_label()` is meant to be a better wrapper for `geom_text()` that requires less customization  
* Say for example, we want to put a wordmark on our plots (there are journals that require this!)
* Doing this with `geom_text()` would require 10+ arguments and has no easy application to figures put together with cowplot (or other packages for doing so) 
 
```{r}
ggdraw(p) + 
  draw_label("Draft", color = "grey80", size = 100, angle = 45)
```


## New grobs: `draw_plot()`
* Imagine you want to put a plot inside of another

```{r}
inset <- 
  pred_data %>% 
  filter(study == "Study1") %>%
  ggplot(aes(y = gender, x = SRhealth, fill = gender)) + 
    scale_fill_manual(values = c("cornflowerblue", "coral")) + 
    scale_y_discrete(labels = c("Male", "Female")) + 
    stat_halfeye(alpha = .8) + 
    my_theme() + 
    theme(legend.position = "none") + theme_half_open(12)

p4 <- pred_data %>% 
  filter(study == "Study1") %>%
  ggplot(aes(x = p_value, SRhealth, fill = gender)) + 
    geom_point(shape = 21, color = "grey20", size = 3) + 
    scale_fill_manual(values = c("cornflowerblue", "coral"), labels = c("Male", "Female")) + 
    my_theme()
```

## New grobs: `draw_plot()`
* Imagine you want to put a plot inside of another

```{r}
ggdraw(p4) + 
  draw_plot(inset, .1, .2, .6, .4)
```

## New grobs: `draw_image()`

We can also add images!

```{r}
p3
```


## New grobs: `draw_image()`

We can also add images!

```{r}
ggdraw() + 
  draw_plot(p3) + 
  draw_image(
    "https://github.com/emoriebeck/psc290-data-viz-2022/raw/main/01-week1-intro/02-code/02-images/ucdavis_logo_blue.png"
    , x = 1, y = 0.05, hjust = 1, vjust = 1, halign = 1, valign = 1,
    width = 0.15
  )
```





+ `draw_plot_label()`
  + `draw_grob()`
  + `draw_image()`

<!-- 1 column start -->
<!-- 2 column start -->
<!-- column end -->
